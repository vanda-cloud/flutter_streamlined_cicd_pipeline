name: Flutter Â» Streamlined CI/CD Pipeline
run-name: ${{ github.actor }} is publishing (${{ github.ref_name }}) ðŸš€

on:
  push:
    branches:
      - dev

jobs:
  build-ios:
    name: Build and Upload iOS
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'

      - name: Install compatible Bundler version
        run: gem install bundler -v 2.4.22

      - name: Install CocoaPods
        run: pod install --project-directory=ios

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2' # specify the correct version

      - name: Build iOS
        run: flutter build ios --release --no-codesign

      - name: Create IPA
        run: |
          mkdir -p build/ios/ipa
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/MyApp.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ios/exportOptions.plist

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ios-release
          path: build/ios/app.ipa

  deploy:
    name: Deploy iOS to App Center
    needs: [build-ios]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: ios-release
          path: ios/

      - name: Verify iOS Artifact
        run: ls -l ios/

      - name: Deploy iOS to App Center
        env:
          DISTRIBUTION_GROUP: "Tester"
          OWNER_NAME: "vanda-cloud"
          APP_NAME: "vanda-cloud"
          API_TOKEN: ${{ secrets.APPCENTER_TOKEN }}
          RELEASE_FILE_LOCATION: "ios/app.ipa"
          FILE_NAME: "app.ipa"
        run: |
          #!/bin/bash
          set -e
          echo "=========CREATE NEW RELEASE=========="
          createNewReleaseUploadResponse=$(curl -X POST "https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/uploads/releases" \
            -H  "accept: application/json" \
            -H  "X-API-Token: $API_TOKEN" \
            -H  "Content-Type: application/json" \
            -H "Content-Length: 0")
          echo "Response JSON:"
          echo "$createNewReleaseUploadResponse"
          ID=$(echo "$createNewReleaseUploadResponse" | jq -r '.id')
          PACKAGE_ASSET_ID=$(echo "$createNewReleaseUploadResponse" | jq -r '.package_asset_id')
          URL_ENCODED_TOKEN=$(echo "$createNewReleaseUploadResponse" | jq -r '.url_encoded_token')
          echo "$ID"
          echo "$PACKAGE_ASSET_ID"
          echo "$URL_ENCODED_TOKEN"
          FILE_SIZE_BYTES=$(wc -c $RELEASE_FILE_LOCATION | awk '{print $1}')
          echo "$FILE_SIZE_BYTES"
          APP_TYPE='application/octet-stream'
          echo "=========UPLOAD METADATA TO GET CHUNK SIZE=========="
          METADATA_URL="https://file.appcenter.ms/upload/set_metadata/$PACKAGE_ASSET_ID?file_name=$FILE_NAME&file_size=$FILE_SIZE_BYTES&token=$URL_ENCODED_TOKEN&content_type=$APP_TYPE"
          metaDataResponse=$(curl -s -d POST \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "X-API-Token: $API_TOKEN" "$METADATA_URL")
          echo "$metaDataResponse"
          CHUNK_SIZE=$(echo "$metaDataResponse" | jq -r '.chunk_size')
          echo "Chunk Size = $CHUNK_SIZE"
          echo "=========CREATE FOLDER TEMP/SPLIT TO STORAGE LIST CHUNK FILE AFTER SPLIT=========="
          mkdir -p android/temp
          echo "=========SPLIT FILE=========="
          split -b "$CHUNK_SIZE" "$RELEASE_FILE_LOCATION" "android/temp/split"
          echo "=========UPLOAD CHUNK=========="
          BLOCK_NUMBER=0
          for i in android/temp/*
          do
            if [ -f "$i" ]; then
              BLOCK_NUMBER=$(($BLOCK_NUMBER + 1))
              CONTENT_LENGTH=$(wc -c "$i" | awk '{print $1}')
              UPLOAD_CHUNK_URL="https://file.appcenter.ms/upload/upload_chunk/$PACKAGE_ASSET_ID?token=$URL_ENCODED_TOKEN&block_number=$BLOCK_NUMBER"
              curl -X POST "$UPLOAD_CHUNK_URL" \
                --data-binary "@$i" \
                -H "Content-Length: $CONTENT_LENGTH" \
                -H "Content-Type: $APP_TYPE"
            fi
          done
          echo "=========FINISHED=========="
          FINISHED_URL="https://file.appcenter.ms/upload/finished/$PACKAGE_ASSET_ID?token=$URL_ENCODED_TOKEN"
          finishedUploadResponse=$(curl -d POST \
            -H "Content-Type: application/json" \
            -H "accept: application/json" \
            -H "X-API-Token: $API_TOKEN" "$FINISHED_URL")
          echo "$finishedUploadResponse"
          echo "=========COMMIT=========="
          COMMIT_URL="https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/uploads/releases/$ID"
          commitResponse=$(curl -H "Content-Type: application/json" \
            -H "accept: application/json" \
            -H "X-API-Token: $API_TOKEN" \
            --data "{\"upload_status\": \"uploadFinished\",\"id\": \"$ID\"}" \
            -X PATCH "$COMMIT_URL")
          echo "$commitResponse"
          echo "=========POLL RESULT=========="
          RELEASE_STATUS_URL="https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/uploads/releases/$ID"
          echo "$RELEASE_STATUS_URL"
          release_id=null
          counter=0
          max_poll_attempts=15
          while [[ $release_id == null && ($counter -lt $max_poll_attempts)]]
          do
              echo "$counter"
              poll_result=$(curl -X 'GET' "$RELEASE_STATUS_URL" \
                -H "accept: application/json" \
                -H "X-API-Token: $API_TOKEN")
              echo "$poll_result"
              release_id=$(echo "$poll_result" | jq -r '.release_distinct_id')
              echo "$release_id"
              counter=$((counter + 1))
              sleep 3
          done
          if [[ $release_id == null ]];
          then
              echo "Failed to find release from appcenter"
              exit 1
          fi
          echo "=========DISTRIBUTE=========="
          DISTRIBUTE_URL="https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/releases/$release_id"
          echo "$DISTRIBUTE_URL"
          distributeResponse=$(curl -H 'Content-Type: text/plain' \
            -H 'accept: application/json' \
            -H "X-API-Token: $API_TOKEN" \
            --data '{"destinations": [{ "name": "'"$DISTRIBUTION_GROUP"'"}] }' \
            -X PATCH "$DISTRIBUTE_URL")
          echo "$distributeResponse"












# name: Flutter Â» Streamlined CI/CD Pipeline
# run-name: ${{ github.actor }} is publishing (${{ github.ref_name }}) ðŸš€

# on:
#   push:
#     branches:
#       - dev

# jobs:
#   build-android:
#     name: Build Android
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Set up Flutter
#       uses: subosito/flutter-action@v2
#       with:
#         flutter-version: '3.22.2'  # Use your desired Flutter version

#     - name: Install dependencies
#       run: flutter pub get

#     - name: Build APK
#       run: flutter build apk --release

#     - name: Upload Android Artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: android-release
#         path: build/app/outputs/flutter-apk/android-release.apk

#   # build-ios:
#   #   name: Build iOS
#   #   runs-on: macos-latest

#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v3

#   #     - name: Set up Java
#   #       uses: actions/setup-java@v3
#   #       with:
#   #         distribution: 'adopt'
#   #         java-version: '17.x'

#   #     - name: Set up Flutter
#   #       uses: subosito/flutter-action@v2
#   #       with:
#   #         flutter-version: '3.22.2' # specify the correct version

#   #     - run: |
#   #         flutter build ios --no-codesign
#   #         cd build/ios/iphoneos
#   #         mkdir Payload
#   #         cd Payload
#   #         ln -s ../Runner.app
#   #         cd ..
#   #         zip -r app.ipa Payload

#   #     - name: Upload iOS Artifact
#   #       uses: actions/upload-artifact@v2
#   #       with:
#   #         name: ios-release.ipa
#   #         path: build/ios/iphoneos/*.ipa

#   deploy:
#     name: Deploy to App Center
#     needs: [build-android]
#     runs-on: ubuntu-latest

#     steps:
#     - name: Download Android Artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: android-release
#         path: android-release.apk

#     # - name: Download iOS Artifact
#     #   uses: actions/download-artifact@v2
#     #   with:
#     #     name: ios-release.ipa

#     - name: Deploy Android to App Center
#       run: |
#         if [ -f "android-release.apk" ]; then
#         curl -F "ipa=@android-release.apk" \
#           -H "X-API-Token: ${{ secrets.APPCENTER_TOKEN_ANDROID }}" \
#           -H "Accept: application/json" \
#           "https://api.appcenter.ms/v0.1/apps/vanda-cloud/vanda-cloud-1/uploads/releases"
#         else
#           echo "Android APK not found!"
#           exit 1
#         fi

    # - name: Deploy iOS to App Center
    #   run: |
    #     curl -F "ipa=@ios-release.ipa" \
    #       -H "X-API-Token: ${{ secrets.APPCENTER_TOKEN_ANDROID }}" \
    #       -H "Accept: application/json" \
    #       "https://api.appcenter.ms/v0.1/apps/vanda-cloud/vanda-cloud/release_uploads"

  # release:
  #   name: Release Apps
  #   runs-on: macos-latest
  #   needs: [build-android, build-ios]
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Download Android Artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: android-release.apk

  #   - name: Download iOS Artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ios-release.ipa

  #   - name: Push to Releases
  #     uses: ncipollo/release-action@v1
  #     with:
  #       artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/ios/iphoneos/*.ipa"
  #       tag: v1.0.${{ github.run_number }}
  #       token: ${{ secrets.RELEASE_TOKEN }}


# name: Flutter Â» Streamlined CI/CD Pipeline
# run-name: ${{ github.actor }} is publishing (${{ github.ref_name }}) ðŸš€

# on:
#   push:
#     workflow_dispatch:
#     pull_request:
#     branches:
#       - dev
#       - production
# jobs:
#   analyze:
#     name: Build and Analyze
#     runs-on: macos-latest
    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'

#       - name: Cache Flutter SDK
#         id: cache-flutter
#         uses: actions/cache@v3
#         with:
#           path: ~/.pub-cache
#           key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - name: Clean Flutter project
#         run: flutter clean

#       - name: Install dependencies
#         run: flutter pub get

#       - name: Analyze code
#         run: flutter analyze

#       # - name: Archive Flutter SDK
#       #   # if: steps.cache-flutter.outputs.cache-hit != 'true'
#       #   uses: actions/upload-artifact@v3
#       #   with:
#       #     name: flutter-sdk
#       #     path: ~/.pub-cache

#   test:
#     name: 4 Automated Tests
#     runs-on: macos-latest
#     needs: analyze    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'

#       - name: Cache Flutter SDK
#         id: cache-flutter
#         uses: actions/cache@v3
#         with:
#           path: ~/.pub-cache
#           key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

#       # - name: Download Flutter SDK
#       #   uses: actions/download-artifact@v3
#       #   with:
#       #     name: flutter-sdk # Ensure this matches the name used in upload-artifact above
#       #     path: ~/.pub-cache

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - name: Run tests
#         run: flutter test

#   build-android:
#     name: Build Android
#     runs-on: macos-latest
#     needs: test
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'
      
#       # - name: Download Flutter SDK
#       #   uses: actions/download-artifact@v3
#       #   with:
#       #     name: flutter-sdk # Ensure this matches the name used in upload-artifact above
#       #     path: ~/.pub-cache

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - name: Build Android
#         run: flutter build apk --debug --split-per-abi

#       - name: Push to Releases
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/app/outputs/apk/debug/*"
#           tag: v1.0.${{ github.run_number }}
#           token: ${{ secrets.TOKEN }}
#           token: ${{ secrets.RELEASE_TOKEN }}

#   build-ios:
#     name: Build iOS
#     runs-on: macos-latest
#     needs: build-android
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'

#       # - name: Download Flutter SDK
#       #   uses: actions/download-artifact@v3
#       #   with:
#       #     name: flutter-sdk # Ensure this matches the name used in upload-artifact above
#       #     path: ~/.pub-cache

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - run: |
#           flutter build ios --no-codesign
#           cd build/ios/iphoneos
#           mkdir Payload
#           cd Payload
#           ln -s ../Runner.app
#           cd ..
#           zip -r app.ipa Payload

#       - name: Push to Releases
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/ios/iphoneos/app.ipa"
#           tag: v1.0.${{ github.run_number }}
#           token: ${{ secrets.TOKEN }}
#           token: ${{ secrets.RELEASE_TOKEN }}

#   release:
#     name: Release Apps
#     runs-on: macos-latest
#     needs: build-ios
#     steps:
#       - name: Push to Releases
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/app/outputs/apk/debug/*,build/ios/iphoneos/app.ipa"
#           tag: v1.0.${{ github.run_number }}
#           token: ${{ secrets.RELEASE_TOKEN }}