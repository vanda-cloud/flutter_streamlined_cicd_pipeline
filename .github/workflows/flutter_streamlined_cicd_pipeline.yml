name: Flutter Â» Streamlined CI/CD Pipeline
run-name: ${{ github.actor }} is publishing (${{ github.ref_name }}) ðŸš€

on:
  push:
    branches:
      - dev

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.2'  # Use your desired Flutter version

    - name: Install dependencies
      run: flutter pub get

    - name: Build APK
      run: flutter build apk --release

    - name: Upload Android Artifact
      uses: actions/upload-artifact@v2
      with:
        name: android-release
        path: build/app/outputs/flutter-apk/app-release.apk

  deploy:
    name: Deploy to App Center
    needs: [build-android]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download Android Artifact
      uses: actions/download-artifact@v2
      with:
        name: android-release
        path: android/

    - name: Verify Android Artifact
      run: ls -l android/

    - name: Start Upload to App Center
      id: start-upload
      env:
        APPCENTER_TOKEN_ANDROID: ${{ secrets.APPCENTER_TOKEN_ANDROID }}
      run: |
        echo "Starting upload to App Center..."

        # Start the upload and retrieve upload_id and upload_url
        UPLOAD_RESPONSE=$(curl -sSf -X POST -H "X-API-Token: $APPCENTER_TOKEN_ANDROID" \
          -H "Content-Type: application/json" \
          "https://api.appcenter.ms/v0.1/apps/vanda-cloud/vanda-cloud-1/release_uploads")

        if [ $? -ne 0 ]; then
          echo "Failed to start upload. Check network or API endpoint."
          exit 1
        fi

        echo "Upload response:"
        echo "$UPLOAD_RESPONSE"

        UPLOAD_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.upload_id')
        UPLOAD_URL=$(echo "$UPLOAD_RESPONSE" | jq -r '.upload_url')

        if [ -z "$UPLOAD_ID" ] || [ -z "$UPLOAD_URL" ]; then
          echo "Failed to retrieve upload_id or upload_url."
          exit 1
        fi

        echo "Upload ID: $UPLOAD_ID"
        echo "Upload URL: $UPLOAD_URL"

        # Upload the file using the obtained upload_url
        UPLOAD_RESULT=$(curl -sSf -X PUT \
          -F "ipa=@android/app-release.apk" \
          -H "Content-Type: application/octet-stream" \
          "$UPLOAD_URL")

        if [ $? -ne 0 ]; then
          echo "Failed to upload APK file."
          exit 1
        fi

        echo "APK upload successful."

        # Commit the upload
        COMMIT_RESULT=$(curl -sSf -X PATCH -H "X-API-Token: $APPCENTER_TOKEN_ANDROID" \
          -H "Content-Type: application/json" \
          -d '{"status": "committed"}' \
          "https://api.appcenter.ms/v0.1/apps/vanda-cloud/vanda-cloud-1/release_uploads/$UPLOAD_ID")

        if [ $? -ne 0 ]; then
          echo "Failed to commit upload."
          exit 1
        fi

        echo "Upload committed successfully."

    - name: Confirm Upload
      run: |
        echo "Checking upload status..."
        curl -H "X-API-Token: ${{ secrets.APPCENTER_TOKEN_ANDROID }}" \
            "https://api.appcenter.ms/v0.1/apps/vanda-cloud/vanda-cloud-1/releases/latest" | jq .







# name: Flutter Â» Streamlined CI/CD Pipeline
# run-name: ${{ github.actor }} is publishing (${{ github.ref_name }}) ðŸš€

# on:
#   push:
#     branches:
#       - dev

# jobs:
#   build-android:
#     name: Build Android
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Set up Flutter
#       uses: subosito/flutter-action@v2
#       with:
#         flutter-version: '3.22.2'  # Use your desired Flutter version

#     - name: Install dependencies
#       run: flutter pub get

#     - name: Build APK
#       run: flutter build apk --release

#     - name: Upload Android Artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: android-release
#         path: build/app/outputs/flutter-apk/android-release.apk

#   # build-ios:
#   #   name: Build iOS
#   #   runs-on: macos-latest

#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v3

#   #     - name: Set up Java
#   #       uses: actions/setup-java@v3
#   #       with:
#   #         distribution: 'adopt'
#   #         java-version: '17.x'

#   #     - name: Set up Flutter
#   #       uses: subosito/flutter-action@v2
#   #       with:
#   #         flutter-version: '3.22.2' # specify the correct version

#   #     - run: |
#   #         flutter build ios --no-codesign
#   #         cd build/ios/iphoneos
#   #         mkdir Payload
#   #         cd Payload
#   #         ln -s ../Runner.app
#   #         cd ..
#   #         zip -r app.ipa Payload

#   #     - name: Upload iOS Artifact
#   #       uses: actions/upload-artifact@v2
#   #       with:
#   #         name: ios-release.ipa
#   #         path: build/ios/iphoneos/*.ipa

#   deploy:
#     name: Deploy to App Center
#     needs: [build-android]
#     runs-on: ubuntu-latest

#     steps:
#     - name: Download Android Artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: android-release
#         path: android-release.apk

#     # - name: Download iOS Artifact
#     #   uses: actions/download-artifact@v2
#     #   with:
#     #     name: ios-release.ipa

#     - name: Deploy Android to App Center
#       run: |
#         if [ -f "android-release.apk" ]; then
#         curl -F "ipa=@android-release.apk" \
#           -H "X-API-Token: ${{ secrets.APPCENTER_TOKEN }}" \
#           -H "Accept: application/json" \
#           "https://api.appcenter.ms/v0.1/apps/vanda-cloud/vanda-cloud-1/release_uploads"
#         else
#           echo "Android APK not found!"
#           exit 1
#         fi

    # - name: Deploy iOS to App Center
    #   run: |
    #     curl -F "ipa=@ios-release.ipa" \
    #       -H "X-API-Token: ${{ secrets.APPCENTER_TOKEN }}" \
    #       -H "Accept: application/json" \
    #       "https://api.appcenter.ms/v0.1/apps/vanda-cloud/vanda-cloud/release_uploads"

  # release:
  #   name: Release Apps
  #   runs-on: macos-latest
  #   needs: [build-android, build-ios]
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Download Android Artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: android-release.apk

  #   - name: Download iOS Artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ios-release.ipa

  #   - name: Push to Releases
  #     uses: ncipollo/release-action@v1
  #     with:
  #       artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/ios/iphoneos/*.ipa"
  #       tag: v1.0.${{ github.run_number }}
  #       token: ${{ secrets.RELEASE_TOKEN }}


# name: Flutter Â» Streamlined CI/CD Pipeline
# run-name: ${{ github.actor }} is publishing (${{ github.ref_name }}) ðŸš€

# on:
#   push:
#     workflow_dispatch:
#     pull_request:
#     branches:
#       - dev
#       - production
# jobs:
#   analyze:
#     name: Build and Analyze
#     runs-on: macos-latest
    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'

#       - name: Cache Flutter SDK
#         id: cache-flutter
#         uses: actions/cache@v3
#         with:
#           path: ~/.pub-cache
#           key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - name: Clean Flutter project
#         run: flutter clean

#       - name: Install dependencies
#         run: flutter pub get

#       - name: Analyze code
#         run: flutter analyze

#       # - name: Archive Flutter SDK
#       #   # if: steps.cache-flutter.outputs.cache-hit != 'true'
#       #   uses: actions/upload-artifact@v3
#       #   with:
#       #     name: flutter-sdk
#       #     path: ~/.pub-cache

#   test:
#     name: 4 Automated Tests
#     runs-on: macos-latest
#     needs: analyze    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'

#       - name: Cache Flutter SDK
#         id: cache-flutter
#         uses: actions/cache@v3
#         with:
#           path: ~/.pub-cache
#           key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}

#       # - name: Download Flutter SDK
#       #   uses: actions/download-artifact@v3
#       #   with:
#       #     name: flutter-sdk # Ensure this matches the name used in upload-artifact above
#       #     path: ~/.pub-cache

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - name: Run tests
#         run: flutter test

#   build-android:
#     name: Build Android
#     runs-on: macos-latest
#     needs: test
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'
      
#       # - name: Download Flutter SDK
#       #   uses: actions/download-artifact@v3
#       #   with:
#       #     name: flutter-sdk # Ensure this matches the name used in upload-artifact above
#       #     path: ~/.pub-cache

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - name: Build Android
#         run: flutter build apk --debug --split-per-abi

#       - name: Push to Releases
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/app/outputs/apk/debug/*"
#           tag: v1.0.${{ github.run_number }}
#           token: ${{ secrets.TOKEN }}
#           token: ${{ secrets.RELEASE_TOKEN }}

#   build-ios:
#     name: Build iOS
#     runs-on: macos-latest
#     needs: build-android
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Java
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'adopt'
#           java-version: '17.x'

#       # - name: Download Flutter SDK
#       #   uses: actions/download-artifact@v3
#       #   with:
#       #     name: flutter-sdk # Ensure this matches the name used in upload-artifact above
#       #     path: ~/.pub-cache

#       - name: Set up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.22.2' # specify the correct version

#       - run: |
#           flutter build ios --no-codesign
#           cd build/ios/iphoneos
#           mkdir Payload
#           cd Payload
#           ln -s ../Runner.app
#           cd ..
#           zip -r app.ipa Payload

#       - name: Push to Releases
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/ios/iphoneos/app.ipa"
#           tag: v1.0.${{ github.run_number }}
#           token: ${{ secrets.TOKEN }}
#           token: ${{ secrets.RELEASE_TOKEN }}

#   release:
#     name: Release Apps
#     runs-on: macos-latest
#     needs: build-ios
#     steps:
#       - name: Push to Releases
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/app/outputs/apk/debug/*,build/ios/iphoneos/app.ipa"
#           tag: v1.0.${{ github.run_number }}
#           token: ${{ secrets.RELEASE_TOKEN }}